Rastrigin <- function(x) {
a=sum(x^2 - 10 * cos(2 * pi  * x)) + 10 * length(x)
print("x")
return(a)
}
set.seed(1234) # The user can use any seed.
dimension <- 5
global.min <- 0
tol <- 1e-13
lower <- rep(-5.12, dimension)
upper <- rep(5.12, dimension)
start_time=proc.time()
set.seed(1234)
out2 <- DEoptim::DEoptim(Rastrigin, lower, upper,
control=list(itermax=1, trace=T, parallelType=0))
end_time=proc.time(); time_taken=end_time-start_time; time_taken
out2$optim
Rastrigin(out2$optim$bestmem)
out2$member
set.seed(1234) # The user can use any seed.
dimension <- 2
global.min <- 0
tol <- 1e-13
lower <- rep(-5.12, dimension)
upper <- rep(5.12, dimension)
if ( !require(DEoptim) )    { install.packages("DEoptim");    library(DEoptim) }
start_time=proc.time()
set.seed(1234)
out2 <- DEoptim::DEoptim(Rastrigin, lower, upper,
control=list(itermax=1, trace=T, parallelType=0))
end_time=proc.time(); time_taken=end_time-start_time; time_taken
out2$member
out2$optim
dimension <- 3
set.seed(1234) # The user can use any seed.
dimension <- 3
global.min <- 0
tol <- 1e-13
lower <- rep(-5.12, dimension)
upper <- rep(5.12, dimension)
start_time=proc.time()
set.seed(1234)
out2 <- DEoptim::DEoptim(Rastrigin, lower, upper,
control=list(itermax=1, trace=T, parallelType=0))
end_time=proc.time(); time_taken=end_time-start_time; time_taken
out2$optim
out2$member
load("D:/Dropbox/0 work/sim_results/NAs.pack_IS_all.RGs_2/ca+1.Rdata")
load("D:/zzzRpacks/stageII.pack_mwl1/stageII.pack/inst/extdata/mwl1.Rdata")
load("D:/zzzRpacks/stageII.pack_mwl1/stageII.pack/inst/extdata/mwl1.Rdata")
Ca.res$RAM
Ca.res$RAM$n.sample
Ca.res$RAM$sampling.parameters
Ca.res$RAM$log.p
Ca.res$RAM$samples
mean(Ca.res$RAM$samples)
mean(Ca.res$RAM$samples[1])
load("D:/zzzRpacks/stageII.pack_all.RGs/stageII.pack/inst/extdata/all.RGs.Rdata")
mean(Ca.res$RAM$samples[1])
load("D:/zzzRpacks/stageII.pack_short_all.RGs+all.RGs/stageII.pack/inst/extdata/all.RGs.Rdata")
load("D:/zzzRpacks/stageII.pack_short_all.RGs+all.RGs/stageII.pack/inst/extdata/all.RGs.Rdata")
mean(Ca.res$RAM$samples[1])
load("D:/zzzRpacks/stageII.pack_short_all.RGs+mwl1/stageII.pack/inst/extdata/mwl1.Rdata")
mean(Ca.res$RAM$samples[1])
load("D:/zzzRpacks/stageII.pack_short_all.RGs+rg1/stageII.pack/inst/extdata/rg1.Rdata")
mean(Ca.res$RAM$samples[1])
load("D:/zzzRpacks/stageII.pack_short_all.RGs+MWraw/stageII.pack/inst/extdata/MWraw.Rdata")
mean(Ca.res$RAM$samples[1])
load("D:/zzzRpacks/stageII.pack_short_all.RGs+rg2/stageII.pack/inst/extdata/rg2.Rdata")
mean(Ca.res$RAM$samples[1])
load("D:/zzzRpacks/stageII.pack_short_all.RGs+mwl2/stageII.pack/inst/extdata/mwl2.Rdata")
mean(Ca.res$RAM$samples[1])
load("D:/zzzRpacks/stageII.pack_mwl1/stageII.pack/inst/extdata/mwl1.Rdata")
mean(Ca.res$RAM$samples[1])
load("~/uni/00 letnany/0data/zrazky/MWdata/MWL_cor/mwl_data_Jaro.RData")
View(ev.tab)
View(mwl.info)
load("~/uni/00 letnany/0data/zrazky/MWL_cor/mwl_data_Jaro_JA_rounded.RData")
var.info
load("D:/Dropbox/0 work/sim_results/X-val/xv1.Rdata")
CrossVal.ev
CrossVal.res$Ev.res.Ca
CrossVal.res$Ev.res.Ca[[1]]
CrossVal.res$optim
prodata$Ca[[1]]
prodata$Ca
prodata$Ca[[105]]
uni.data$RG.overview.2mm
load("D:/Dropbox/0 work/my_packages/crossval.DEopt10 - Copy/crossval.DEopt/inst/extdata/.Rdata")
load("~/uni/eawag/R model from Dario/2015Mai21MubP.RData")
par <- c(A = 625*600*.5*.4*.2, #m2
nco1 = 6.874255e-01,co2 = 8.195015e-02, bf = 7.389576, #from l/s to m3/hr
k = 0.1, #hr
nsi1 = 3.044435e-01,nsi2 = 8.289373e-01)
L <- L.obs.1
Rain <- inp4mod.1
Disch        <- fcia_lin_1box(par=par, L=L, Rain=Rain, dt=dt.mod)
# define model function
fcia_lin_1box <- function(par, L, Rain, dt)
{
# model:
# ------
#
#   flow through a 1 cascade reservoir model:
#
#   dS1                1
#   ----  =  A * P  -  -- * S1 + bf
#    dt                K
#
#             1                2*pi*t            4*pi*t            2*pi*t            4*pi*t
#   flow  =  -- * S1 + si1*sin(------) + si2*sin(------) + co1*cos(------) + co2*cos(------)
#             K                  24                24                24                24
#
# state variables:
# ----------------
#
#   S1      cascade state 1
#
# parameters:
# -----------
#
#   A       catchment area [m2]
#   K       reservoir residence time [hr]
#   si1,si2,co1,co2     parameters of trigonometric function to describe dry weather variation
#   Rain    Inp [m/hr]
#   bf      constant groundwater inflow in the sewer [m3/hr]
# decode layout:
# --------------
time=sysanal.decode(L)$val
Dt = time[2]-time[1]
co1=-par["nco1"]; # if (is.na(co1)) print("par missing")
co2=par["co2"];   # if (is.na(co2)) print("par missing")
si1=-par["nsi1"]; # if (is.na(si1)) print("par missing")
si2=-par["nsi2"]; # if (is.na(si2)) print("par missing")
WWF = si1*sin(2*pi*time/24)+si2*sin(4*pi*time/24)+co1*cos(2*pi*time/24)+co2*cos(4*pi*time/24)
# STEP I: start simulations inustus_temp times earlier
# burn-in phase
#---------------
inustus_temp = 20 # time steps
start=max(dt, time[1]-inustus_temp*(dt))
end  =time[length(time)]
time =seq(start,end, by=dt)
if ((length(time)-inustus_temp) < length(L))
{
end = end + dt*(length(L)-(length(time)-inustus_temp))
time =seq(start,end, by=dt)
}
Rain.elon = c(rep(0,inustus_temp),Rain) # m/h
# calculate results:
# ------------------
S1_ini <- 4; # close to dry weather analitical sol
K=par["k"];
# ii
Rain.fl  = par["A"] * Rain.elon+par["bf"] # m3/h
S0 <- S1_ini
S  <- rep(NA,length(time))
SWF<- S
# iii
for (t in 1:length(time))
{
S[t]  <- Rain.fl[t]*K + (S0-Rain.fl[t]*K)*exp(-1/K*Dt) # analitical sol linear reservoir
SWF[t]<- Rain.fl[t] - (S[t]-S0)/Dt  # m3/min
S0    <- S[t]
}
flow =  SWF[(inustus_temp+1):length(SWF)]/3.6 + WWF #l/s
res <- as.numeric(flow)
res[which(res<0)]  <- 1e-7 # eliminate neg val
names(res) <- L
return(res)
}
Disch        <- fcia_lin_1box(par=par, L=L, Rain=Rain, dt=dt.mod)
plot(t.grid.Ome.1, Disch, type="l", ylim=c(0,90), xlim=as.numeric(c(t.grid.1mi.1[1], t.grid.1mi.1[length(t.grid.1mi.1)])))
getwd()
setwd("C:\\Users\\xy\\Documents\\uni\\000my_packages\\noSWMM3")
devtools::load_all()
